# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ ~/bash_cmd -- Function to store and run commands from file                 ║
# ║ https://github.com/nicedreams/bash_cmd                                     ║
# ║ -------------------------------------------------------------------------- ║
# ║ Usage: Source this file inside your ~/.bashrc -- Use 'cmd' to run function ║
# ║ -------------------------------------------------------------------------- ║
# ║ This program is free software: you can redistribute it and/or modify       ║
# ║ it under the terms of the GNU General Public License as published by       ║
# ║ the Free Software Foundation, either version 3 of the License, or          ║
# ║ (at your option) any later version.                                        ║
# ║                                                                            ║
# ║ This program is distributed in the hope that it will be useful,            ║
# ║ but WITHOUT ANY WARRANTY; without even the implied warranty of             ║
# ║ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ║
# ║ GNU General Public License for more details.                               ║
# ║                                                                            ║
# ║ You should have received a copy of the GNU General Public License          ║
# ║ along with this program.  If not, see <https://www.gnu.org/licenses/>.     ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Version 2021-04-16

export CMDFILE="${HOME}/.cmdnotes"

cmd() {
  local fzf_options="--height 50% --reverse --exact --preview-window=hidden --multi=0"
  if [[ ! -e "${CMDFILE}" ]]; then touch "${CMDFILE}"; fi
  case "$1" in
    [1-9]*)
      line=$(sed -n "${1}"p "${CMDFILE}")
      #eval "${line}"
      bash -c "${line}"
    ;;
    -c|--copy)
      if [[ "${2}" ]]; then
        line=$(sed -n "${2}"p "${CMDFILE}")
        printf '%s' "${line}" | xclip -selection clipboard | printf '%s \n' && printf '%s \n' "Line ${2} copied to clipboard (xclip)" || printf '%s \n' "Issue when copying to clipboard (xclip)"
      else
        printf '%s \n' "Nothing entered to copy"
      fi
    ;;
    -f|--fzf)
      if [[ ! $(command -v fzf) ]]; then
        printf "Fzf not found and required for this option!"
      else
        runcmd=$(fzf \
          --header="<enter> Run line as command | <ctrl-y> Xclip line to clipboard" \
          --bind="ctrl-y:execute-silent(printf '%s' "{+}" | xclip -selection clipboard | printf '%s \n')+abort" \
          ${fzf_options} < "${CMDFILE}")
        #eval "${runcmd}"
        bash -c "${runcmd}"
      fi
    ;;
    -fa|--fzf-add)
      if [[ ! $(command -v fzf) ]]; then
        printf "Fzf not found and required for this option!"
      else
        local histcmd=$(fc -l -n 1 | tail -n1000 | sed 's/^\s*//' | fzf --header="<enter> Add line from history to cmd" ${fzf_options})
      fi
      if [[ "${histcmd}" ]]; then printf '%s \n' "${histcmd}" >> "${CMDFILE}"; fi
    ;;
    -fd|--fzf-delete)
      fzfline=( $(cat -n "${CMDFILE}" | sed -e 's/^[ \t]*//' | fzf --header="<enter> Delete selected line" ${fzf_options}) )
      if [[ "${fzfline}" ]]; then sed -i "${fzfline[0]}"d "${CMDFILE}" && printf '%s \n' "Removed line: ${fzfline[0]} from: ${CMDFILE}" || printf '%s \n' "Issue removing line: ${fzfline[0]} from: ${CMDFILE}"; fi
    ;;
    -n|--number|--numbers)
      local number=0
      while IFS='' read -r LINE || [ -n "${LINE}" ]; do
        ((number++))
        printf '%+3s %s\n' "${number}": "${LINE}"
      done < "${CMDFILE}"
    ;;
    -a|--alias)
      if [[ ! "${2}" ]]; then printf '%s \n' "No line number entered"; return; fi
      read -p "Enter name of alias to create: " alias_name
      if [[ ! "${alias_name}" ]]; then
        printf '%s \n' "No name entered"
      else
        getcmd=$(sed -n ${2}p "${CMDFILE}")
        alias "${alias_name}"="${getcmd}"
      fi
    ;;
    -as|--alias-save)
      if [[ ! "${2}" ]]; then printf '%s \n' "No line number entered"; return; fi
      read -p "Enter name of alias to append to ~/.bash_aliases: " alias_name
      if [[ ! "${alias_name}" ]]; then
        printf '%s \n' "No name entered"
      else
        getcmd=$(sed -n ${2}p "${CMDFILE}")
        printf '%s \n' "alias ${alias_name}='${getcmd}'" >> "${HOME}"/.bash_aliases
      fi
    ;;
    -l|--last)
      lastcmd=$(fc -ln | tail -2 | head -1)
      printf '%s \n' "${lastcmd#"${lastcmd%%[![:space:]]*}"}" >> "${CMDFILE}" && printf '%s \n' "Added last command to ${CMDFILE##*/}" || printf '%s \n' "An error happened!"
    ;;
    -d|--delete)
      if [[ -z "${2}" ]]; then
        printf "No input entered\n"
      else
        sed -i "${2}"d "${CMDFILE}" && printf "%sRemoved line ${2} from ${CMDFILE##*/}\n" || printf "%sIssue removing line ${2} from ${CMDFILE##*/}\n"
      fi
    ;;
    -dd|--delete-double)
      #sed '$!N; /^\(.*\)\n\1$/!P; D' "${CMDFILE}"
      sed -i '/^ *$/d' "${CMDFILE}" || printf '%s \n' "Issue removing blank lines with sed"
      sed -i 's/[ \t]*$//' "${CMDFILE}" || printf '%s \n' "Issue removing trailing spaces with sed"
      printf '%s \n' "Deleted blank lines and trailing spaces from ${CMDFILE##*/}"
    ;;
    -b|--backup)
      local date_time="$(printf '%(%Y-%m-%d_%H.%M.%S)T' -1)"
      cp "${CMDFILE}" "${CMDFILE}"-"${date_time}" && printf "%sCreated backup of ${CMDFILE##*/} to ${CMDFILE}-${date_time}\n" || printf "%sIssue creating backup copy\n"
    ;;
    --clear)
      read -r -p "Press Enter to clear/delete ${CMDFILE##*/} or CTRL+C to cancel: "
      > "${CMDFILE}" && printf '%s \n' "Cleared ${CMDFILE}"
    ;;
    --change)
      if [[ -z "$2" ]]; then
        export CMDFILE="${HOME}/.cmdnotes" && printf '%s \n' "Changed to: ${HOME}/.cmdnotes"
      else
        export CMDFILE="${2}" && printf '%s \n' "Changed to: ${2}"
      fi
      printf "%sChanged CMDFILE path to: ${CMDFILE}\n"
    ;;
    -e|--edit) "${EDITOR}" "${CMDFILE}" ;;
    -h|--help)
      printf "Store and run commands from file: [${CMDFILE##*/}]\n\n"
      printf "Usage:\n"
      printf "  cmd\t\t\t:displays stored commands by number\n"
      printf "    Text or Command\t:any text after cmd will be added to file\n"
      printf "    ##\t\t\t:run line number as command\n"
      printf "    -f |--fzf\t\t:run line as command or copy to clipboard (fzf/xclip)\n"
      printf "    -fa|--fzf-add\t:add line from history to cmd file (fzf)\n"
      printf "    -fd|--fzf-delete\t:delete line from cmd file (fzf)\n"
      printf "    -n |--numbers\t:displays stored commands by number\n"
      printf "    -c |--copy\t\t:copy line number to clipboard (xclip)\n"
      printf "    -l |--last\t\t:add last command retaining double/single quotes\n"
      printf "    -a |--alias #\t:create named bash alias from cmd number\n"
      printf "    -as|--alias-save #\t:save named bash alias in ~/.bash_aliases\n"
      printf "    -d |--delete #\t:delete command by line number\n"
      printf "    -e |--edit\t\t:edit cmd file\n"
      printf "    -b |--backup\t:backup cmd file with timestamp\n"
      printf "    -dd\t\t\t:delete blank lines and trailing spaces from cmd file\n"
      printf "    --clear\t\t:clear cmd file contents\n"
      printf "    --change PATH\t:change PATH to a different cmd file\n"
      printf "    --change\t\t:set PATH to default cmd file\n"
      printf "    -h |--help\t\t:this usage\n"
      printf "  Current cmd PATH:\t${CMDFILE}\n\n"
    ;;
    *)
      if [[ ! "$1" ]]; then
        local number=0
        while IFS='' read -r LINE || [ -n "${LINE}" ]; do
          ((number++))
          printf '%+3s %s\n' "${number}": "${LINE}"
        done < "${CMDFILE}"
      else
        printf '%s \n' "$*" >> "${CMDFILE}"
      fi
    ;;
  esac
}
